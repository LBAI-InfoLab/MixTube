


def extract_exlusion_data(exlusion_file):
    """
    Read data in exlusion_file to craft a dictionnary
    {metal : [incompatible_metal]}

    return a dictionnary

    exlusion_file is the name of a csv file. each line of the file consist in:
    a first element : the name of the metal
    all others element : name of the metal incompatible with the first element
    """

    ## parameters
    metal_to_exclusion = {}

    ## loop over exclusion file
    data_metal = open(exlusion_file, "r")
    for line in data_metal:

        ## parse line
        line = line.rstrip()
        line_in_array = line.split(",")

        ## extract exclusion
        metal = line_in_array[0]
        exclusion_list = line_in_array[1:]

        ## process exclusion list
        exclusion_list_processed = []
        for elt in exclusion_list:
            if(elt != ""):
                exclusion_list_processed.append(elt)
        metal_to_exclusion[metal] = exclusion_list_processed

    ## close file
    data_metal.close()

    ## return dict
    return metal_to_exclusion




def craft_tube_composition(metal_to_exclusion):
    """
    Use metal to exlusion data to craft a composition for the tube

    - metal_to_exclusion is a dictionnary generated by the extract_exlusion_data
    function

    return a dictionnary (tube composition)
    """

    ## parameters
    tube_to_metal = {}

    ## init data structure
    tube_to_metal["tube1"] = []

    ## extract metal list
    metal_list = list(metal_to_exclusion.keys())

    ## loop over metal in metal_list
    cmpt_tube = 1
    for metal in metal_list:

        ## init status
        tube_assigned = False

        ## check if metal can be added
        for tube in tube_to_metal:
            can_be_added = True
            composition = tube_to_metal[tube]

            for elt in composition:
                if(elt in metal_to_exclusion[metal]):
                    can_be_added = False

            if(can_be_added and not tube_assigned):
                tube_to_metal[tube].append(metal)
                tube_assigned = True

        ## if metal can't be added, open new tube
        if(not tube_assigned):
            cmpt_tube += 1
            tube_to_metal["tube"+str(cmpt_tube)] = []
            tube_to_metal["tube"+str(cmpt_tube)].append(metal)

    ## return dict
    return tube_to_metal


def save_results_to_txt(tube_to_metal, save_file_name):
    """
    save tube composition to a text file
    tube_to_metal is a dictionnary generated by the craft_tube_composition
    function
    save_file_name is self explanatory ;)
    """

    ## open result file
    results = open(save_file_name, "w")
    for tube in list(tube_to_metal.keys()):

        ## write tube composition
        results.write(str(tube)+"\n")
        results.write(str(tube_to_metal[tube])+"\n")
        results.write("#"*150+"\n")

    ## close result file
    results.close()




def main(argv):
    """
    main function of the module
    -> catch user arguments
    -> update default parameters
    -> run the programm
    """

    ## importation
    import getopt

    ## default parameter
    exclusion_file = "exclusion_data.csv"
    output_file = "tube_composition.txt"

    ## catch arguments
    try:
        opts, args = getopt.getopt(argv, "he:o:d", ["help", "exclusion_file=", "output_file="])
    except getopt.GetoptError:
        usage()
        sys.exit(2)

    ## parse arguments
    ## update default parameters if needed
    for opt, arg in opts:

        if opt in ("-h", "--help"):
            ## display help
            print("#"*72)
            print("#"*25+"CRAFT TUBE MIX - HELP "+"#"*25)
            print("#"*72)
            print("=> This script is used to craft tube composition that respect icompatibility between specific agents.")
            print("-> run it without arguments to conserve the default settings")
            print("-> you can specify the :")
            print("\t-name of the exlusion file (-e / --exclusion_file)")
            print("\t-name of the output file (-o / --output_file)")
            print("-> Exemple of use :")
            print("\tpython craft_tube_mix.py -e my_exclusion_data.csv -o foo.txt")
            sys.exit()
        elif opt in ("-e", "--exclusion_file"):
            exclusion_file = arg
        elif opt in ("-o", "--output_file"):
            output_file = arg

    ## run the programm
    metal_to_exclusion = extract_exlusion_data(exclusion_file)
    tube_to_composition = craft_tube_composition(metal_to_exclusion)
    save_results_to_txt(tube_to_composition, output_file)



if __name__=='__main__':

    ## importation
    import sys

    ## run main
    main(sys.argv[1:])
